// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        String      @id @default(uuid())
  name      String
  email     String   @unique
  password  String   // hashed password
  role      String   @default("office") // could be "office" or "technician"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Invoice {
  id        String    @id @default(uuid())
  subtotal  Float
  tax       Float
  total     Float
  createdAt DateTime  @default(now())

  job       Job       @relation(fields: [jobId], references: [id])
  jobId     String    @unique

  payments  Payment[]
  lineItems InvoiceLineItem[]
}

model Payment {
  id        String          @id @default(uuid())
  amount    Float
  createdAt DateTime        @default(now())

  invoice   Invoice         @relation(fields: [invoiceId], references: [id])
  invoiceId String

  session   PaymentSession?
}

model PaymentSession {
  id        String   @id @default(uuid())
  paymentId String   @unique
  payment   Payment  @relation(fields: [paymentId], references: [id])
}



model InvoiceLineItem {
  id        String   @id @default(uuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity   Int
  unitPrice  Float
  lineTotal  Float
}

model Customer {
  id        String      @id @default(uuid())
  name      String
  phone     String
  email     String   @unique
  address   String
  jobs      Job[]
}

model Job {
  id          String          @id @default(uuid())
  title       String
  description String       @db.Text
  status      JobStatus    @default(NEW)
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  appointment Appointment?
  invoice     Invoice?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  history     JobStatusHistory[]
}

model JobStatusHistory {
  id        String   @id @default(uuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  oldStatus String?
  newStatus String
  changedBy String   // User ID or email of who made the change
  createdAt DateTime @default(now())
}

model Appointment {
  id          String       @id @default(uuid())
  jobId       String       @unique
  job         Job          @relation(fields: [jobId], references: [id])
  technician  String
  startTime   DateTime
  endTime     DateTime
}


enum JobStatus {
  NEW
  SCHEDULED
  DONE
  INVOICED
  PAID
}
